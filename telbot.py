import os
import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime, timedelta
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import time
import locale
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry  # –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–º–ø–æ—Ä—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
JSON_FILE = 'test23.json'
CUSTOM_REPLACEMENTS_FILE = 'custom_replacements.json'
URL = "https://menu.sttec.yar.ru/timetable/rasp_second.html"
GROUP_NAME = "–ò–ë1-41"
TOKEN = '7584041622:AAEdU7SqMJIybhemrlPpIwfeZKt8TXr3MNQ'
ADMINS = [879554693]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
SESSION = requests.Session()
retries = Retry(
    total=3,
    backoff_factor=0.5,
    status_forcelist=[500, 502, 503, 504]
)
SESSION.mount('https://', HTTPAdapter(max_retries=retries))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
last_request_time = {}
cache = {
    'replacements': None,
    'date': None,
    'week_type': None,
    'last_update': None
}

# -------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------------

def load_schedule():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(JSON_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
        return []

def load_custom_replacements():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã."""
    if not os.path.exists(CUSTOM_REPLACEMENTS_FILE):
        return {}
    try:
        with open(CUSTOM_REPLACEMENTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–º–µ–Ω: {e}")
        return {}

def save_custom_replacements(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã."""
    with open(CUSTOM_REPLACEMENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def parse_website_date():
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å —Å–∞–π—Ç–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞: 
      "–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ 5 —Ñ–µ–≤—Ä–∞–ª—è 2025 –≥–æ–¥–∞ / —Å—Ä–µ–¥–∞"
    """
    try:
        response = SESSION.get(URL, timeout=15)
        soup = BeautifulSoup(response.text, 'html.parser')
        # –ò—â–µ–º <div> —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞"
        date_div = soup.find('div', align='center', string=lambda x: x and '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞' in x)
        if date_div:
            try:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ "–Ω–∞" –∏ –∑–∞—Ç–µ–º –ø–æ "/"
                part = date_div.text.split("–Ω–∞", 1)[1].strip()
                date_str, day_str = part.split("/", 1)
                date = datetime.strptime(date_str.strip(), "%d %B %Y –≥–æ–¥–∞")
                cache['date'] = date
                cache['last_update'] = datetime.now()
                return date, day_str.strip().lower()  # day_str, –Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å—Ä–µ–¥–∞"
            except Exception as inner_e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã: {inner_e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ —Ç–µ–∫—É—â—É—é
        return cache['date'] or datetime.now(), None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        return cache['date'] or datetime.now(), None

def fetch_replacements():
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ–Ω—ã —Å —Å–∞–π—Ç–∞."""
    try:
        response = SESSION.get(URL, timeout=15)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')
        replacements = {}
        
        table = soup.find('table')
        if not table:
            return cache['replacements'] or {}
            
        for row in table.find_all('tr')[1:]:
            cells = row.find_all('td')
            if len(cells) < 6 or GROUP_NAME not in cells[1].text:
                continue
                
            pair_numbers = cells[2].text.strip()
            discipline = cells[4].text.strip()
            classroom = cells[5].text.strip()
            
            pairs = []
            for part in pair_numbers.split(','):
                part = part.strip()
                if '-' in part:
                    start, end = map(int, part.split('-'))
                    pairs.extend(map(str, range(start, end+1)))
                else:
                    pairs.append(part)
            
            for pair in pairs:
                replacements[pair] = {'name': discipline, 'cab': classroom}
        
        cache['replacements'] = replacements
        cache['last_update'] = datetime.now()
        return replacements
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ–Ω: {e}")
        return cache['replacements'] or {}

def get_merged_replacements():
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–º–µ–Ω—ã —Å —Å–∞–π—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ."""
    site_replacements = fetch_replacements()
    custom_replacements = load_custom_replacements().get(GROUP_NAME, {})
    return {**site_replacements, **custom_replacements}

def get_week_type():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (—á–∏—Å–ª–∏—Ç–µ–ª—å/–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)."""
    try:
        response = SESSION.get(URL, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        week_info = soup.find('div', align='center').text
        
        if '—á–∏—Å–ª–∏—Ç–µ–ª—å' in week_info.lower():
            cache['week_type'] = '—á–∏—Å–ª–∏—Ç–µ–ª—å'
        elif '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å' in week_info.lower():
            cache['week_type'] = '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å'
        else:
            cache['week_type'] = '—á–∏—Å–ª–∏—Ç–µ–ª—å'  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        print(f"DEBUG: week_type = {cache['week_type']}")
        return cache['week_type']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏: {e}")
        current_week = (cache['date'] or datetime.now()).isocalendar()[1]
        cache['week_type'] = "—á–∏—Å–ª–∏—Ç–µ–ª—å" if current_week % 2 else "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"
        print(f"DEBUG: week_type (fallback) = {cache['week_type']}")
        return cache['week_type']

def format_schedule(day_schedule, replacements):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∑–∞–º–µ–Ω."""
    if not day_schedule:
        return "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
    
    output = []
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è 2 –ø–∞—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ–Ω–∞
    if '2' in replacements:
        replacement = replacements['2']
        output.append(
            "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï! –ó–∞–º–µ–Ω–∞ 2 –ø–∞—Ä—ã:*\n"
            f"üîÑ –ü–∞—Ä–∞ 2: *{replacement['name']}* \n"
            f"–ö–∞–±–∏–Ω–µ—Ç: {replacement['cab']}\n"
            "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï"
        )
    
    for pair_num in sorted(day_schedule.keys(), key=lambda x: int(x)):
        lesson = day_schedule[pair_num]
        if pair_num in replacements:
            replacement = replacements[pair_num]
            output.append(
                f"üîÑ –ü–∞—Ä–∞ {pair_num}: *{replacement['name']}* \n"
                f"–ö–∞–±–∏–Ω–µ—Ç: {replacement['cab']}\n"
                "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï"
            )
        else:
            output.append(
                f"üìò –ü–∞—Ä–∞ {pair_num}: *{lesson['name']}* \n"
                f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']} \n"
                f"–ö–∞–±–∏–Ω–µ—Ç: {lesson['cab']}\n"
                "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï"
            )
    return "\n".join(output)

def get_schedule(day_offset=0):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
    
    –ï—Å–ª–∏ day_offset == 0, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤–∑—è—Ç—ã–π –∏–∑ —Å–∞–π—Ç–∞ (–∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è).
    –ï—Å–ª–∏ day_offset != 0, –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è —Å–º–µ—â–µ–Ω–∏–µ –∫ –¥–∞—Ç–µ —Å —Å–∞–π—Ç–∞ –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.
    """
    try:
        schedule = load_schedule()
        replacements = get_merged_replacements()
        
        base_date, website_day = parse_website_date()
        # –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ "—Å–µ–≥–æ–¥–Ω—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å —Å —Å–∞–π—Ç–∞, –∞ –¥–ª—è "–∑–∞–≤—Ç—Ä–∞" ‚Äì –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        if day_offset == 0:
            if website_day:
                # –ü—Ä–∏–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫ –∑–∞–≥–ª–∞–≤–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å—Ä–µ–¥–∞" -> "–°—Ä–µ–¥–∞")
                target_day = website_day.capitalize()
            else:
                days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                target_day = days[base_date.weekday()]
        else:
            target_date = base_date + timedelta(days=day_offset)
            days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
            target_day = days[target_date.weekday()]
        
        print(f"DEBUG: target_day = {target_day}")
        week_type = get_week_type()
        
        # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è –≤ —Å–ø–∏—Å–∫–µ JSON
        for entry in schedule:
            if target_day in entry:
                day_schedule = entry[target_day].get(week_type, {})
                schedule_text = format_schedule(day_schedule, replacements)
                return f"*{target_day}, –Ω–µ–¥–µ–ª—è: {week_type.capitalize()}*\n\n{schedule_text}"
        
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

# -------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
# -------------------------------

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), KeyboardButton("–ó–∞–≤—Ç—Ä–∞"))
    bot.send_message(
        message.chat.id,
        "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    now = time.time()
    
    if user_id in last_request_time and (now - last_request_time[user_id]) < 5:
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return
    
    last_request_time[user_id] = now
    
    try:
        if message.text.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            schedule_text = get_schedule(0)
            status = f"\n\nüîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {cache['last_update'].strftime('%H:%M:%S') if cache['last_update'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}"
            bot.send_message(message.chat.id, schedule_text + status, parse_mode="Markdown")
            
        elif message.text.lower() == "–∑–∞–≤—Ç—Ä–∞":
            schedule_text = get_schedule(1)
            status = f"\n\nüîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {cache['last_update'].strftime('%H:%M:%S') if cache['last_update'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}"
            bot.send_message(message.chat.id, schedule_text + status, parse_mode="Markdown")
            
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞")
            
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# -------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------------

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            time.sleep(30)
